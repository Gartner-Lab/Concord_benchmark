library(patchwork)
# Individual merged files from different sequencing experiments
dros_ec_d1.data <- read.table("../data/drosophila_bordercell/out_gene_exon_tagged.dge.txt",
header=T,
row.names=1)
?write_h5ad
library(VisCello)
cello("./data/drosophila_bordercell/cello_concord_bordercell_Apr22-1311/")
library(VisCello)
cello("./data/drosophila_bordercell/cello_concord_bordercell_Apr22-1311/")
library(VisCello)
cello("./data/drosophila_bordercell/cello_concord_bordercell_Apr22-1311/")
cello("./data/drosophila_bordercell/cello_concord_bordercell_Apr22-1311/")
cello("./data/drosophila_bordercell/cello_concord_bordercell_Apr22-1311/")
cello("./data/drosophila_bordercell/cello_concord_bordercell_Apr22-1311/")
cello("./data/drosophila_bordercell/cello_concord_bordercell_Apr22-1311/")
cello("./data/drosophila_bordercell/cello_concord_bordercell_Apr22-1311/")
cello("./data/drosophila_bordercell/cello_concord_bordercell_Apr22-1311/")
cello("./data/drosophila_bordercell/cello_concord_bordercell_Apr22-1311/")
cello("./data/drosophila_bordercell/cello_concord_bordercell_Apr22-1311/")
cello("./data/drosophila_bordercell/cello_concord_bordercell_Apr22-1311/")
library(VisCello)
cello("./data/intestine_dev/cello_benchmark_Huycke_Jan08-1324/")
cello("./data/intestine_dev/cello_benchmark_Huycke_cc__Jan09-1846/")
cello("./data/intestine_dev/cello_benchmark_Huycke_Jan08-1324/")
eset$mac_subtype=NA
dep_idx = clist$Macrophage@idx
dep_clus = clist$Macrophage@pmeta$leiden_Concord_sub
eset$mac_subtype[dep_idx[dep_clus %in% c("15")]] = 'Monocyte'
eset$mac_subtype[dep_idx[dep_clus %in% c("13")]] = 'mo-DC/DC'
eset$mac_subtype[dep_idx[dep_clus %in% c('11', '14', '7')]] = 'Ccr2/Lyz2+ Macrophage'
eset$mac_subtype[dep_idx[dep_clus %in% c('0', '6', '2','10', '1')]] = 'Apol7c/Timd4/Mmp9+ gMac'
eset$mac_subtype[dep_idx[dep_clus %in% c('12', '4')]] = 'Differentiating monocyte'
eset$mac_subtype[dep_idx[dep_clus %in% c('9','5', '3', '8')]] = 'Lyve1+Mrc1+ M2‐like macrophage'
saveRDS(eset, "./data/intestine_dev/cello_benchmark_Huycke_Jan08-1324/eset.rds")
cello("./data/intestine_dev/cello_benchmark_Huycke_Jan08-1324")
cello("./data/intestine_dev/cello_benchmark_Huycke_Jan08-1324")
cello("./data/intestine_dev/cello_benchmark_Huycke_Jan08-1324")
remotes::install_github("satijalab/seurat-data", quiet = TRUE)
load(file = "../data/spatialDLPFC_Visium/sce_sub_for_vignette.Rdata")
load(file = "./data/spatialDLPFC_Visium/sce_sub_for_vignette.Rdata")
load(file = "./data/spatialDLPFC_Visium/Human_DLPFC_Visium_processedData_sce_scran_spatialLIBD.Rdata")
sce@metadata
colData(sce)
colnames(colData(sce))
colData(sce)
colData(sce)$Layer
table(colData(sce)$Layer)
table(colData(sce)$layer_guess_reordered)
sce@assays@data
sce@metadata
sce@int_elementMetadata
sce@int_colData
sce@int_colData$reducedDims
sce@int_metadata$scater
sce@colData
library(SpatialExperiment)
sce_to_spe <- function(sce = fetch_data("sce"), imageData = NULL) {
sce <- check_sce(sce)
# Load assays
assays_visium <- SummarizedExperiment::assays(sce)
# Load rowData
rowData_visium <- SummarizedExperiment::rowData(sce)
## Re-case tissue
if (is.factor(sce$tissue)) sce$tissue <- sce$tissue == "1"
# Load colData
cols_to_drop <-
c(
"tissue",
"row",
"col",
"imagerow",
"imagecol"
)
colData_visium <-
SummarizedExperiment::colData(sce)[, !colnames(SummarizedExperiment::colData(sce)) %in% c(cols_to_drop, "height", "width", "barcode"), drop = FALSE]
names(colData_visium)[names(colData_visium) == "sample_name"] <- "sample_id"
# Load spatialCoords
spatialCoords_visium <-
SummarizedExperiment::colData(sce)[, colnames(SummarizedExperiment::colData(sce)) %in% cols_to_drop, drop = FALSE]
names(spatialCoords_visium) <-
c(
"in_tissue",
"array_row",
"array_col",
"pxl_row_in_fullres",
"pxl_col_in_fullres"
)
## Use the official sample id name
colnames(colData_visium)[colnames(colData_visium) == "sample_name"] <- "sample_id"
colData_visium$sample_id <- as.character(colData_visium$sample_id)
# Load reducedDim
reducedDimNames_visium <-
SingleCellExperiment::reducedDims(sce)
# Load images from the web for our data
if (is.null(imageData)) {
sample_id <- unique(colData_visium$sample_id)
url_images <-
paste0(
"https://spatial-dlpfc.s3.us-east-2.amazonaws.com/images/",
sample_id,
"_tissue_lowres_image.png"
)
# Load scaleFactors
url_scaleFactors <- paste0(
"https://raw.githubusercontent.com/LieberInstitute/",
"HumanPilot/master/10X/",
sample_id,
"/scalefactors_json.json"
)
names(url_scaleFactors) <- sample_id
scaleFactors_visium <-
lapply(url_scaleFactors, jsonlite::read_json)
## Create a list of images
spatial_img_list <- mapply(function(url) {
SpatialExperiment::SpatialImage(
url
)
}, url_images)
img_dat <- DataFrame(
sample_id = as.character(sample_id),
image_id = rep("lowres", length(sample_id)),
data = I(spatial_img_list),
scaleFactor = vapply(
scaleFactors_visium,
"[[",
numeric(1),
"tissue_lowres_scalef",
USE.NAMES = FALSE
)
)
imageData <- img_dat
## Fix things we had done that are not default:
# Scaling for lowres image: https://github.com/LieberInstitute/HumanPilot/blob/master/Analysis/Layer_Notebook.R#L118-L119
spatialCoords_visium$pxl_col_in_fullres <- spatialCoords_visium$pxl_col_in_fullres / img_dat$scaleFactor[match(colData_visium$sample_id, img_dat$sample_id)]
spatialCoords_visium$pxl_row_in_fullres <- spatialCoords_visium$pxl_row_in_fullres / img_dat$scaleFactor[match(colData_visium$sample_id, img_dat$sample_id)]
## Names of the columns is flipped at https://github.com/LieberInstitute/HumanPilot/blob/master/Analysis/Layer_Notebook.R#L116 compared to what
## SpatialExperiment does at https://github.com/drighelli/SpatialExperiment/blob/bf1b18b559ea2785d52db4e39a85f1d584aede45/R/read10xVisium.R#L170
# tmp <- spatialCoords_visium$pxl_row_in_fullres
# spatialCoords_visium$pxl_row_in_fullres <- spatialCoords_visium$pxl_col_in_fullres
# spatialCoords_visium$pxl_col_in_fullres <- tmp
## The above is no longer necessary thanks to https://github.com/drighelli/SpatialExperiment/commit/6710fe8b0a7919191ecce989bb6831647385ef5f
}
# ## Create object manually
# spe <- new("SpatialExperiment", SingleCellExperiment::SingleCellExperiment(
#     rowData = rowData_visium,
#     colData = colData_visium,
#     assays = assays_visium,
#     reducedDims = reducedDimNames_visium
# ))
#
# ## Add missing spatial info
# colData(spe) <- spatialCoords_visium
# SpatialExperiment::spatialCoordsNames(spe) <- c("pxl_col_in_fullres", "pxl_row_in_fullres")
# SpatialExperiment::imgData(spe) <- imageData
#
## This works now in SpatialExperiment version 1.1.701, so we no longer
## need the manual code from above
## The following code ultimately fails due to the current lack of support
## for multiple `sample_id`s, as in
## https://github.com/drighelli/SpatialExperiment/blob/a9e54fbd5af7fe676f8a5b29e4cfe113402070d4/R/SpatialExperiment.R#L143-L144
## or in
## https://github.com/drighelli/SpatialExperiment/blob/a9e54fbd5af7fe676f8a5b29e4cfe113402070d4/R/SpatialExperiment.R#L164
spe <- SpatialExperiment::SpatialExperiment(
rowData = rowData_visium,
colData = cbind(colData_visium, spatialCoords_visium),
assays = assays_visium,
reducedDims = reducedDimNames_visium,
sample_id = NULL,
spatialCoordsNames = c("pxl_col_in_fullres", "pxl_row_in_fullres"),
scaleFactors = img_dat$scaleFactor,
imgData = img_dat,
imageSources = url_images,
loadImage = FALSE
)
return(spe)
}
spe = sce_to_spe(sce_sub)
sce_to_spe <- function(sce = fetch_data("sce"), imageData = NULL) {
# Load assays
assays_visium <- SummarizedExperiment::assays(sce)
# Load rowData
rowData_visium <- SummarizedExperiment::rowData(sce)
## Re-case tissue
if (is.factor(sce$tissue)) sce$tissue <- sce$tissue == "1"
# Load colData
cols_to_drop <-
c(
"tissue",
"row",
"col",
"imagerow",
"imagecol"
)
colData_visium <-
SummarizedExperiment::colData(sce)[, !colnames(SummarizedExperiment::colData(sce)) %in% c(cols_to_drop, "height", "width", "barcode"), drop = FALSE]
names(colData_visium)[names(colData_visium) == "sample_name"] <- "sample_id"
# Load spatialCoords
spatialCoords_visium <-
SummarizedExperiment::colData(sce)[, colnames(SummarizedExperiment::colData(sce)) %in% cols_to_drop, drop = FALSE]
names(spatialCoords_visium) <-
c(
"in_tissue",
"array_row",
"array_col",
"pxl_row_in_fullres",
"pxl_col_in_fullres"
)
## Use the official sample id name
colnames(colData_visium)[colnames(colData_visium) == "sample_name"] <- "sample_id"
colData_visium$sample_id <- as.character(colData_visium$sample_id)
# Load reducedDim
reducedDimNames_visium <-
SingleCellExperiment::reducedDims(sce)
# Load images from the web for our data
if (is.null(imageData)) {
sample_id <- unique(colData_visium$sample_id)
url_images <-
paste0(
"https://spatial-dlpfc.s3.us-east-2.amazonaws.com/images/",
sample_id,
"_tissue_lowres_image.png"
)
# Load scaleFactors
url_scaleFactors <- paste0(
"https://raw.githubusercontent.com/LieberInstitute/",
"HumanPilot/master/10X/",
sample_id,
"/scalefactors_json.json"
)
names(url_scaleFactors) <- sample_id
scaleFactors_visium <-
lapply(url_scaleFactors, jsonlite::read_json)
## Create a list of images
spatial_img_list <- mapply(function(url) {
SpatialExperiment::SpatialImage(
url
)
}, url_images)
img_dat <- DataFrame(
sample_id = as.character(sample_id),
image_id = rep("lowres", length(sample_id)),
data = I(spatial_img_list),
scaleFactor = vapply(
scaleFactors_visium,
"[[",
numeric(1),
"tissue_lowres_scalef",
USE.NAMES = FALSE
)
)
imageData <- img_dat
## Fix things we had done that are not default:
# Scaling for lowres image: https://github.com/LieberInstitute/HumanPilot/blob/master/Analysis/Layer_Notebook.R#L118-L119
spatialCoords_visium$pxl_col_in_fullres <- spatialCoords_visium$pxl_col_in_fullres / img_dat$scaleFactor[match(colData_visium$sample_id, img_dat$sample_id)]
spatialCoords_visium$pxl_row_in_fullres <- spatialCoords_visium$pxl_row_in_fullres / img_dat$scaleFactor[match(colData_visium$sample_id, img_dat$sample_id)]
## Names of the columns is flipped at https://github.com/LieberInstitute/HumanPilot/blob/master/Analysis/Layer_Notebook.R#L116 compared to what
## SpatialExperiment does at https://github.com/drighelli/SpatialExperiment/blob/bf1b18b559ea2785d52db4e39a85f1d584aede45/R/read10xVisium.R#L170
# tmp <- spatialCoords_visium$pxl_row_in_fullres
# spatialCoords_visium$pxl_row_in_fullres <- spatialCoords_visium$pxl_col_in_fullres
# spatialCoords_visium$pxl_col_in_fullres <- tmp
## The above is no longer necessary thanks to https://github.com/drighelli/SpatialExperiment/commit/6710fe8b0a7919191ecce989bb6831647385ef5f
}
# ## Create object manually
# spe <- new("SpatialExperiment", SingleCellExperiment::SingleCellExperiment(
#     rowData = rowData_visium,
#     colData = colData_visium,
#     assays = assays_visium,
#     reducedDims = reducedDimNames_visium
# ))
#
# ## Add missing spatial info
# colData(spe) <- spatialCoords_visium
# SpatialExperiment::spatialCoordsNames(spe) <- c("pxl_col_in_fullres", "pxl_row_in_fullres")
# SpatialExperiment::imgData(spe) <- imageData
#
## This works now in SpatialExperiment version 1.1.701, so we no longer
## need the manual code from above
## The following code ultimately fails due to the current lack of support
## for multiple `sample_id`s, as in
## https://github.com/drighelli/SpatialExperiment/blob/a9e54fbd5af7fe676f8a5b29e4cfe113402070d4/R/SpatialExperiment.R#L143-L144
## or in
## https://github.com/drighelli/SpatialExperiment/blob/a9e54fbd5af7fe676f8a5b29e4cfe113402070d4/R/SpatialExperiment.R#L164
spe <- SpatialExperiment::SpatialExperiment(
rowData = rowData_visium,
colData = cbind(colData_visium, spatialCoords_visium),
assays = assays_visium,
reducedDims = reducedDimNames_visium,
sample_id = NULL,
spatialCoordsNames = c("pxl_col_in_fullres", "pxl_row_in_fullres"),
scaleFactors = img_dat$scaleFactor,
imgData = img_dat,
imageSources = url_images,
loadImage = FALSE
)
return(spe)
}
spe = sce_to_spe(sce_sub)
if (interactive()) {
run_app(
spe = spe
)
}
library(shiny)
if (interactive()) {
run_app(
spe = spe
)
}
vis_clus(
spe = spe,
clustervar = "layer_guess_reordered",
sampleid = "151673",
colors = libd_layer_colors,
... = " LIBD Layers"
)
library(spatialLIBD)
vis_clus(
spe = spe,
clustervar = "layer_guess_reordered",
sampleid = "151673",
colors = libd_layer_colors,
... = " LIBD Layers"
)
if (interactive()) {
run_app(
spe = spe
)
}
if (!exists("sce_layer")) sce_layer <- fetch_data(type = "sce_layer", eh = ehub)
ehub <- ExperimentHub::ExperimentHub()
if (!exists("sce_layer")) sce_layer <- fetch_data(type = "sce_layer", eh = ehub)
load("./data/Human_DLPFC_Visium_processedData_sce_scran_sce_layer_spatialLIBD.Rdata")
load("./data/spatialDLPFC_Visium//Human_DLPFC_Visium_processedData_sce_scran_sce_layer_spatialLIBD.Rdata")
modeling_results <- fetch_data("modeling_results", eh = ehub)
load("./data/spatialDLPFC_Visium/Human_DLPFC_Visium_modeling_results.Rdata")
if (interactive()) {
run_app(
spe = spe,
sce_layer = sce_layer,
modeling_results = modeling_results,
sig_genes = sig_genes
)
}
if (interactive()) {
run_app(
spe = spe,
sce_layer = sce_layer,
modeling_results = modeling_results,
)
}
vis_clus(
spe = spe,
clustervar = "layer_guess_reordered",
sampleid = "151673",
colors = libd_layer_colors,
... = " LIBD Layers"
)
vis_clus(
spe = spe,
clustervar = "layer_guess_reordered",
sampleid = "151673",
colors = libd_layer_colors,
... = " LIBD Layers",
spatial = FALSE
)
library(Vis)
library(VisCello)
cello("./data/janesick_nature_comms_2023/cello_visium_janesick_nc_2023_dev_Jun03-1817/")
cello("./data/janesick_nature_comms_2023/cello_xenium_janesick_nc_2023_dev_Jun03-1817/
")"
cello("./data/janesick_nature_comms_2023/cello_xenium_janesick_nc_2023_dev_Jun03-1817/")
cello("./data/intestine_dev/cello_benchmark_Huycke_Jan08-1324/")
cello("./data/janesick_nature_comms_2023/cello_xenium_janesick_nc_2023_dev_Jun03-1817/")
cello("./data/janesick_nature_comms_2023/cello_xenium_janesick_nc_2023_dev_Jun03-1817/")
cello("./data/intestine_dev/cello_benchmark_Huycke_Jan08-1324/")
cello("./data/janesick_nature_comms_2023/cello_xenium_janesick_nc_2023_dev_Jun03-1817/")
cello("./data/janesick_nature_comms_2023/cello_xenium_janesick_nc_2023_dev_Jun03-1817/")
library(VisCello)
cello("./data/janesick_nature_comms_2023/cello_xenium_janesick_nc_2023_dev_Jun03-1817/")
cello("./data/janesick_nature_comms_2023/cello_xenium_janesick_nc_2023_dev_Jun05-1233/")
cello("./data/janesick_nature_comms_2023/cello_xenium_janesick_nc_2023_dev_Jun05-1233/")
clist$xenium_rep1@idx
cello("./data/janesick_nature_comms_2023/cello_xenium_janesick_nc_2023_dev_Jun05-1233/")
library(VisCello)
cello("./data/janesick_nature_comms_2023/cello_scRNA_scRNAxenium_janesick_nc_2023_scRNAxenium_Jun06-1232")
library(VisCello)
cello("./data/human_pbmc_atac_benchmark/cello_activity_fixedcells_consensus_processed_pbmc_atac_dev_Jun08-1850")
exprs(eset)[0:20,0:20]
cello("./data/human_pbmc_atac_benchmark/cello_activity_fixedcells_consensus_processed_pbmc_atac_dev_Jun08-1850")
library(VisCello)
cello("../data/celegans_binyamin/N2_outs/cello_concord_celN2_Jun12-1457")
cello("./data/celegans_binyamin/N2_outs/cello_concord_celN2_Jun12-1457")
library(VisCello)
cello("../data/human_pbmc_atac_benchmark/cello_concord_processed_pbmc_atac_scRNAmultiome_Jun19-1920")
cello("./data/human_pbmc_atac_benchmark/cello_concord_processed_pbmc_atac_scRNAmultiome_Jun19-1920")
library(VisCello)
cello("data/cel_packerN2/cello_cel_packerN2_Jun27-1115/")
suppressPackageStartupMessages({
library(Seurat)
library(reticulate)
library(optparse)
library(peakRAM)      # install.packages("peakRAM") once
library(readr)
})
install.packages("optparse")
suppressPackageStartupMessages({
library(Seurat)
library(reticulate)
library(optparse)
library(peakRAM)      # install.packages("peakRAM") once
library(readr)
})
install.packages("peakRAM")
suppressPackageStartupMessages({
library(Seurat)
library(reticulate)
library(optparse)
library(peakRAM)      # install.packages("peakRAM") once
library(readr)
})
opt <- optparse::parse_args(
optparse::OptionParser(
option_list = list(
optparse::make_option(c("--timestamp"), type = "character",
help = "timestamp string")
)
)
)
FILE_SUFFIX <- opt$timestamp
FILE_SUFFIX
## ---- Config (filled by generator) ----
PROJ_NAME  <- "cel_packerN2"
ADATA_FILE <- "cel_packerN2_preprocessed.h5ad"
BATCH_KEY  <- "batch"
METHOD     <- "seurat_rpca"
DATA_DIR <- file.path("..","..","data", PROJ_NAME)
SAVE_DIR <- file.path("..","..","save", PROJ_NAME,
paste0(METHOD, "_", FILE_SUFFIX))
DATA_DIR
SAVE_DIR
DATA_DIR <- file.path("..","..","data", PROJ_NAME)
SAVE_DIR <- file.path("..","..","save", PROJ_NAME,METHOD)
SAVE_DIR
dir.create(SAVE_DIR, recursive = TRUE, showWarnings = FALSE)
getwd()
setwd(jobs)
setwd("./jobs/benchmark_cel_packerN2/")
DATA_DIR <- file.path("..","..","data", PROJ_NAME)
SAVE_DIR <- file.path("..","..","save", PROJ_NAME,METHOD)
dir.create(SAVE_DIR, recursive = TRUE, showWarnings = FALSE)
cat("Reading AnnData:", file.path(DATA_DIR, ADATA_FILE), "\n")
anndata  <- reticulate::import("anndata", convert = FALSE)
reticulate::use_condaenv("concord", required = TRUE)
setwd("./jobs/benchmark_cel_packerN2/")
opt <- optparse::parse_args(
optparse::OptionParser(
option_list = list(
optparse::make_option("--timestamp", type="character",
help="timestamp string")
)
)
)
FILE_SUFFIX <- opt$timestamp
suppressPackageStartupMessages({
library(Seurat)
library(Biobase)     # for ExpressionSet
library(optparse)
library(peakRAM)
library(readr)
})
opt <- optparse::parse_args(
optparse::OptionParser(
option_list = list(
optparse::make_option("--timestamp", type="character",
help="timestamp string")
)
)
)
FILE_SUFFIX <- opt$timestamp
FILE_SUFFIX
PROJ_NAME <- "cel_packerN2"
ESET_DIR  <- "../data/cel_packerN2/viscello_ds_cel_packerN2"           # directory produced by converter
METHOD    <- "seurat_rpca"
DATA_DIR <- ESET_DIR                # eset.rds lives right here
SAVE_DIR <- file.path("..","..","save", PROJ_NAME,
paste0(METHOD, "_", FILE_SUFFIX))
SAVE_DIR
dir.create(SAVE_DIR, recursive = TRUE, showWarnings = FALSE)
cat("Reading ExpressionSet:", file.path(DATA_DIR, "eset.rds"), "\n")
eset <- readRDS(file.path(DATA_DIR, "eset.rds"))
PROJ_NAME <- "cel_packerN2"
ESET_DIR  <- "../../data/cel_packerN2/viscello_ds_cel_packerN2"           # directory produced by converter
METHOD    <- "seurat_rpca"             # rpca / cca …
DATA_DIR <- ESET_DIR                # eset.rds lives right here
SAVE_DIR <- file.path("..","..","save", PROJ_NAME,
paste0(METHOD, "_", FILE_SUFFIX))
dir.create(SAVE_DIR, recursive = TRUE, showWarnings = FALSE)
cat("Reading ExpressionSet:", file.path(DATA_DIR, "eset.rds"), "\n")
eset <- readRDS(file.path(DATA_DIR, "eset.rds"))
getwd()
library(VisCello)
cello("./data/CE_CB/cello_benchmark_CBCE_Jan30-1028/")
300/60
library(VisCello)
cello("./data/human_pbmc_atac_benchmark/cello_concord_processed_pbmc_atac_scRNAmultiome_Jun19-1920/")
library(VisCello)
cello()
library(VisCello)
cello("./data/huycke_intestine/cello_huycke_intestine_Jul17-1951/")
cello("./data/huycke_intestine/cello_huycke_intestine_Jul17-1951/")
cello("./data/huycke_intestine/cello_huycke_intestine_Jul17-1951/")
